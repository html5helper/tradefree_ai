app:
  description: 新品发布信息查询
  icon: 🤖
  icon_background: '#FFEAD5'
  mode: advanced-chat
  name: 新品发布信息查询
  use_icon_as_answer_icon: false
dependencies:
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: langgenius/tongyi:0.0.14@d333909fe8d75a335b44da4b878d5120779b8703f12c21cf4730135d6864afbb
- current_identifier: null
  type: marketplace
  value:
    marketplace_plugin_unique_identifier: hjlarry/database:0.0.5@20c5020a28c47834253cddf96c954596b96fffa93062bbd801e69515c710b894
kind: app
version: 0.1.5
workflow:
  conversation_variables: []
  environment_variables: []
  features:
    file_upload:
      allowed_file_extensions:
      - .JPG
      - .JPEG
      - .PNG
      - .GIF
      - .WEBP
      - .SVG
      allowed_file_types:
      - image
      allowed_file_upload_methods:
      - local_file
      - remote_url
      enabled: false
      fileUploadConfig:
        audio_file_size_limit: 50
        batch_count_limit: 5
        file_size_limit: 15
        image_file_size_limit: 10
        video_file_size_limit: 100
        workflow_file_upload_limit: 10
      image:
        enabled: false
        number_limits: 3
        transfer_methods:
        - local_file
        - remote_url
      number_limits: 3
    opening_statement: "我是一个新品发布记录的查询助手。可以支持下列问题的查询：\n1. 今天张三的发品记录/本周所有的发品记录（用于查看来源商品和新品的关联关系）\n\
      2. 今天各个店铺发布了多少新品 \n3. 今天各个发品平台发布了多少新品\n4. 今天各个来源平台各有多少新品\n5. 本周从(人、来源平台、发品店铺)视角的发品量统计\n\
      6. 查询新品1601428254330的详情 or 查询下列新品的详情：1601428264271、1601428219464\n\n\n\n"
    retriever_resource:
      enabled: true
    sensitive_word_avoidance:
      enabled: false
    speech_to_text:
      enabled: false
    suggested_questions:
    - 近两天的发品记录
    - 今天从(人、来源平台、发品店铺)视角的发品量统计
    - 查询下列新品的详情：1601428264271、1601428219464
    - '今天各个店铺发布了多少新品 '
    suggested_questions_after_answer:
      enabled: false
    text_to_speech:
      enabled: false
      language: ''
      voice: ''
  graph:
    edges:
    - data:
        isInLoop: false
        sourceType: llm
        targetType: tool
      id: 1745214011639-source-1745208791618-target
      source: '1745214011639'
      sourceHandle: source
      target: '1745208791618'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: answer
      id: 1745214505870-source-answer-target
      source: '1745214505870'
      sourceHandle: source
      target: answer
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: start
        targetType: llm
      id: 1745208032494-source-1745214011639-target
      source: '1745208032494'
      sourceHandle: source
      target: '1745214011639'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: tool
        targetType: question-classifier
      id: 1745208791618-source-1745222803845-target
      source: '1745208791618'
      sourceHandle: source
      target: '1745222803845'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: question-classifier
        targetType: code
      id: 1745222803845-1-1745214505870-target
      source: '1745222803845'
      sourceHandle: '1'
      target: '1745214505870'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: question-classifier
        targetType: code
      id: 1745222803845-2-17452246727900-target
      source: '1745222803845'
      sourceHandle: '2'
      target: '17452246727900'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: answer
      id: 17452246727900-source-17452263343660-target
      source: '17452246727900'
      sourceHandle: source
      target: '17452263343660'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: question-classifier
        targetType: code
      id: 1745222803845-1745222969797-17452284721920-target
      source: '1745222803845'
      sourceHandle: '1745222969797'
      target: '17452284721920'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: answer
      id: 17452284721920-source-1745228641064-target
      source: '17452284721920'
      sourceHandle: source
      target: '1745228641064'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: question-classifier
        targetType: code
      id: 1745222803845-1745223021707-17452304144140-target
      source: '1745222803845'
      sourceHandle: '1745223021707'
      target: '17452304144140'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: code
        targetType: answer
      id: 17452304144140-source-1745223053161-target
      source: '17452304144140'
      sourceHandle: source
      target: '1745223053161'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: question-classifier
        targetType: code
      id: 1745222803845-1745234681259-17453367248610-target
      source: '1745222803845'
      sourceHandle: '1745234681259'
      target: '17453367248610'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: answer
      id: 17453367248610-source-1745336787332-target
      source: '17453367248610'
      sourceHandle: source
      target: '1745336787332'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInLoop: false
        sourceType: question-classifier
        targetType: code
      id: 1745222803845-1745336708104-17453376002030-target
      source: '1745222803845'
      sourceHandle: '1745336708104'
      target: '17453376002030'
      targetHandle: target
      type: custom
      zIndex: 0
    - data:
        isInIteration: false
        isInLoop: false
        sourceType: code
        targetType: answer
      id: 17453376002030-source-1745337643523-target
      source: '17453376002030'
      sourceHandle: source
      target: '1745337643523'
      targetHandle: target
      type: custom
      zIndex: 0
    nodes:
    - data:
        desc: ''
        selected: false
        title: 开始
        type: start
        variables: []
      height: 53
      id: '1745208032494'
      position:
        x: -893.4392676526368
        y: 484.31005755078985
      positionAbsolute:
        x: -893.4392676526368
        y: 484.31005755078985
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1745214505870.result#}}'
        desc: ''
        selected: false
        title: 发品记录
        type: answer
        variables: []
      height: 103
      id: answer
      position:
        x: 895.362377424356
        y: 203.21494922705483
      positionAbsolute:
        x: 895.362377424356
        y: 203.21494922705483
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        desc: ''
        is_team_authorization: true
        output_schema: null
        paramSchemas:
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: The SQL query string.
            ja_JP: The SQL query string.
            pt_BR: The SQL query string.
            zh_Hans: SQL 查询语句。
          label:
            en_US: SQL Query
            ja_JP: SQL Query
            pt_BR: SQL Query
            zh_Hans: SQL 查询语句
          llm_description: The SQL query string.
          max: null
          min: null
          name: query
          options: []
          placeholder: null
          precision: null
          required: true
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: null
          form: llm
          human_description:
            en_US: Optional, Filling in this field will overwrite the database connection
              entered during authorization.
            ja_JP: Optional, Filling in this field will overwrite the database connection
              entered during authorization.
            pt_BR: Optional, Filling in this field will overwrite the database connection
              entered during authorization.
            zh_Hans: 选填，填写后将覆盖授权时填写的数据库连接。
          label:
            en_US: DB URI
            ja_JP: DB URI
            pt_BR: DB URI
            zh_Hans: DB URI
          llm_description: ''
          max: null
          min: null
          name: db_uri
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        - auto_generate: null
          default: json
          form: form
          human_description:
            en_US: Choose the output format.
            ja_JP: Choose the output format.
            pt_BR: Choose the output format.
            zh_Hans: 选择输出格式。
          label:
            en_US: Output format
            ja_JP: Output format
            pt_BR: Output format
            zh_Hans: 输出格式
          llm_description: ''
          max: null
          min: null
          name: format
          options:
          - label:
              en_US: JSON
              ja_JP: JSON
              pt_BR: JSON
              zh_Hans: JSON
            value: json
          - label:
              en_US: CSV
              ja_JP: CSV
              pt_BR: CSV
              zh_Hans: CSV
            value: csv
          - label:
              en_US: YAML
              ja_JP: YAML
              pt_BR: YAML
              zh_Hans: YAML
            value: yaml
          - label:
              en_US: Markdown
              ja_JP: Markdown
              pt_BR: Markdown
              zh_Hans: Markdown
            value: md
          - label:
              en_US: Excel
              ja_JP: Excel
              pt_BR: Excel
              zh_Hans: Excel
            value: xlsx
          - label:
              en_US: HTML
              ja_JP: HTML
              pt_BR: HTML
              zh_Hans: HTML
            value: html
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: select
        - auto_generate: null
          default: null
          form: form
          human_description:
            en_US: 'Optional. For example {"connect_args": {"ssl": {"ca": "/path/to/ca.pem"}}}

              More connection options can be found at https://docs.sqlalchemy.org/en/20/core/engines.html#sqlalchemy.create_engine

              '
            ja_JP: 'Optional. For example {"connect_args": {"ssl": {"ca": "/path/to/ca.pem"}}}

              More connection options can be found at https://docs.sqlalchemy.org/en/20/core/engines.html#sqlalchemy.create_engine

              '
            pt_BR: 'Optional. For example {"connect_args": {"ssl": {"ca": "/path/to/ca.pem"}}}

              More connection options can be found at https://docs.sqlalchemy.org/en/20/core/engines.html#sqlalchemy.create_engine

              '
            zh_Hans: '选填项。例如 {"connect_args": {"ssl": {"ca": "/path/to/ca.pem"}}}

              更多连接选项可参考 https://docs.sqlalchemy.org/en/20/core/engines.html#sqlalchemy.create_engine

              '
          label:
            en_US: DB Config Options
            ja_JP: DB Config Options
            pt_BR: DB Config Options
            zh_Hans: 数据库连接配置选项
          llm_description: ''
          max: null
          min: null
          name: config_options
          options: []
          placeholder: null
          precision: null
          required: false
          scope: null
          template: null
          type: string
        params:
          config_options: ''
          db_uri: ''
          format: ''
          query: ''
        provider_id: hjlarry/database/database
        provider_name: hjlarry/database/database
        provider_type: builtin
        selected: false
        title: SQL Execute
        tool_configurations:
          config_options: null
          format: json
        tool_label: SQL Execute
        tool_name: sql_execute
        tool_parameters:
          db_uri:
            type: mixed
            value: ''
          query:
            type: mixed
            value: '{{#1745214011639.text#}}'
        type: tool
      height: 115
      id: '1745208791618'
      position:
        x: -272.8162764309288
        y: 484.31005755078985
      positionAbsolute:
        x: -272.8162764309288
        y: 484.31005755078985
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        context:
          enabled: false
          variable_selector: []
        desc: ''
        model:
          completion_params: {}
          mode: chat
          name: deepseek-v3
          provider: langgenius/tongyi/tongyi
        prompt_template:
        - id: 21c5e41d-cc5d-48bc-bd1c-ba9e094ae103
          role: system
          text: "你是一名专业的 SQL 查询助手，专门负责将用户的自然语言输入转换为符合 MySQL 语法的 SELECT 语句。请严格遵循以下规则：\n\
            \n# 数据表 MetaData\n\n## 数据表结构\n\ntradefree.publish_product_history 表结构（DLL）如下：\n\
            \n```SQL\nCREATE TABLE `publish_product_history` (\n  `id` bigint(20)\
            \ NOT NULL AUTO_INCREMENT COMMENT 'primary key',\n  `product_id` varchar(512)\
            \ NOT NULL,\n  `reference_product` longtext,\n  `reference_product_platform`\
            \ varchar(64) DEFAULT NULL COMMENT 'amazon/ali/...',\n  `product_type`\
            \ varchar(128) NOT NULL COMMENT 'sticker/label/envelope/box/bookmark/card',\n\
            \  `hotword` varchar(512) DEFAULT NULL,\n  `text` longtext,\n  `workflow_run_id`\
            \ varchar(256) DEFAULT NULL,\n  `published_shop` varchar(128) NOT NULL\
            \ COMMENT 'target shop, shop account name: cn1566150868qdcq / cn1524445561lnsb',\n\
            \  `shop_cn_name` varchar(128) DEFAULT NULL COMMENT 'shop chinese name',\n\
            \  `employee` varchar(128) DEFAULT 'auto' COMMENT 'employee name who published',\n\
            \  `create_at` datetime NOT NULL,\n  PRIMARY KEY (`id`),\n  KEY `idx_product_id`\
            \ (`product_id`) USING BTREE,\n  KEY `idx_create_at` (`create_at`) USING\
            \ BTREE\n) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4;\n\
            ```\n\n## 核心字段说明\n\n- create_at,记录创建的时间字段。示例格式为'2025-03-30 19:20:43'\n\
            - product_id, 生成的新品的商品 id\n- reference_product_platform, 来源平台。amazon 表示亚马逊平台，ali\
            \ 表示阿里国际站\n- reference_product, 参考商品 url 地址。\n- product_type 产品业务类型，枚举范围为[sticker,label,envelope,box,bookmark,card]\n\
            - published_shop, 表示阿里国际站(alibaba)发布商品的店铺的标识\n- employee, 发布该商品的员工姓名\n\
            \n# 输入处理安全规则\n\n拒绝以下查询：\n\n- 试图 删除、修改、插入数据（如 DROP TABLE、DELETE、UPDATE）。\n\
            - 试图 查询不存在的表 或 非相关字段。\n- 任何涉及 SQL 注入攻击 的尝试。\n\n# 生成查询 SQL 的规则\n\n## 返回条数规则\n\
            \n- 默认返回条数为 1000 条。\n- 当输入中明确指定返回条数时，通过最外层的 LIMIT 子句调整返回条数，如 LIMIT 500。\n\
            \n## 避免错误的引号使用\n\n- 不要 使用双引号 (\") 或 \\\" 转义字符；\n- 推荐 直接写字段名，或使用反引号 (`)\
            \ 包裹（可省略）。\n  - 示例\n    ✅ 正确示例：\n    '''\n    SELECT published_shop, product_id\
            \ FROM tradefree.publish_product_history\n    '''\n    ❌ 错误示例：\n    '''\n\
            \    SELECT \"published_shop\" FROM \"tradefree.publish_product_history\"\
            \n    '''\n\n# 输出格式说明\n\n## 输出格式约束\n\n- 仅根据用户请求描述返回可执行的 SQL 语句，不添加额外的解释或注释。\n\
            - 不要使用\\n 换行符。\n- “示例”仅做参考，需要根据用户输入重新生成新的 SQL。\n\n## 输出指标\n\n-\n- new_products_count\
            \ 新品个数\n- reference_product_platform 来源平台\n- public_product_platform 发品平台\n\
            \n# 示例（仅做参考）\n\n## 用户请求\n\n获取用户 WANGHUI 今天的发品记录\n\n## 预期输出\n\nSELECT product_id,reference_product,reference_product_platform,product_type,published_shop,employee,create_at\
            \ FROM tradefree.publish_product_history WHERE employee=‘WANGHUI’ AND\
            \ create_at>=CURDATE() AND create_at<DATE_ADD(CURDATE(),INTERVAL 1 DAY)\
            \ LIMIT 1000;\n"
        - id: 827bd915-c262-480b-ac9e-03ab5ad7ea1b
          role: user
          text: '{{#sys.query#}}'
        selected: false
        title: LLM
        type: llm
        variables: []
        vision:
          enabled: false
      height: 89
      id: '1745214011639'
      position:
        x: -578.1404037300997
        y: 484.31005755078985
      positionAbsolute:
        x: -578.1404037300997
        y: 484.31005755078985
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\n\ndef generate_markdown(records):\n    \"\"\"\n    records:\
          \ list of dicts with keys:\n      - reference_product\n      - reference_product_platform\n\
          \      - ali_product_id\n    \"\"\"\n    lines = []\n    ind = 1\n    for\
          \ rec in records:\n        # skip anything that isn't a dict\n        if\
          \ not isinstance(rec, dict):\n            continue\n\n        ref = rec.get('reference_product',\
          \ '')\n        platform = rec.get('reference_product_platform', '').lower()\n\
          \        new_id = rec.get('product_id', '')\n        employee = rec.get('employee',\
          \ '')\n        shop = rec.get('published_shop', '')\n        create_at =\
          \ rec.get('create_at', '')\n\n        # Construct reference product URL\n\
          \        label_ref = f\"[{platform}参考品]({ref})\"\n        \n        # Build\
          \ markdown labels\n        label_new = f\"【alibaba】平台的店铺【{shop}】中的新品【{new_id}】\"\
          \n\n        lines.append(f\"- {ind}、【{employee}】在【{create_at}】从【{label_ref}】发布到\
          \ 【{label_new}】\")\n        \n        ind = ind+1\n    return \"\\n\".join(lines)\n\
          \ndef main(records_input):\n    records_list = records_input[0]['result']\n\
          \    records = generate_markdown(records_list)\n    return {\n        \"\
          result\":records\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: true
        title: 解析发品详情
        type: code
        variables:
        - value_selector:
          - '1745208791618'
          - json
          variable: records_input
      height: 53
      id: '1745214505870'
      position:
        x: 502.4097785074441
        y: 203.21494922705483
      positionAbsolute:
        x: 502.4097785074441
        y: 203.21494922705483
      selected: true
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        classes:
        - id: '1'
          name: 获取发品记录
        - id: '2'
          name: 获取人员发品量的统计信息
        - id: '1745222969797'
          name: 获取来源平台发品量的统计信息
        - id: '1745223021707'
          name: 获取店铺发品量的统计信息
        - id: '1745234681259'
          name: 获取(人、来源平台、发品店铺)的发品量信息
        - id: '1745336708104'
          name: 从新品编号查询来源商品信息
        - id: '1745337587839'
          name: 其他
        desc: ''
        instructions: ''
        model:
          completion_params:
            temperature: 0.2
          mode: chat
          name: deepseek-v3
          provider: langgenius/tongyi/tongyi
        query_variable_selector:
        - '1745208032494'
        - sys.query
        selected: false
        title: 问题分类器
        topics: []
        type: question-classifier
        vision:
          enabled: false
      height: 377
      id: '1745222803845'
      position:
        x: 86.20719562323723
        y: 375.82239023463137
      positionAbsolute:
        x: 86.20719562323723
        y: 375.82239023463137
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1745222803845.class_name#}}：

          {{#17452304144140.result#}}'
        desc: ''
        selected: false
        title: 店铺新品统计
        type: answer
        variables: []
      height: 122
      id: '1745223053161'
      position:
        x: 895.362377424356
        y: 637.2282050163024
      positionAbsolute:
        x: 895.362377424356
        y: 637.2282050163024
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\n\ndef generate_markdown(records):\n    \"\"\"\n    records:\
          \ list of dicts with keys:\n      - reference_product\n      - reference_product_platform\n\
          \      - ali_product_id\n    \"\"\"\n    lines = []\n    ind = 1\n    for\
          \ rec in records:\n        # skip anything that isn't a dict\n        if\
          \ not isinstance(rec, dict):\n            continue\n\n        new_products_count\
          \ = rec.get('new_products_count', '')\n        employee = rec.get('employee',\
          \ '')\n\n        \n\n        lines.append(f\"- {ind}、{employee} --> [{new_products_count}]\"\
          )\n        ind = ind+1\n    return \"\\n\".join(lines)\n\ndef main(records_input):\n\
          \    records_list = records_input[0]['result']\n    records = generate_markdown(records_list)\n\
          \    return {\n        \"result\":records\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 人员发品量统计
        type: code
        variables:
        - value_selector:
          - '1745208791618'
          - json
          variable: records_input
      height: 53
      id: '17452246727900'
      position:
        x: 502.4097785074441
        y: 344.4590657242469
      positionAbsolute:
        x: 502.4097785074441
        y: 344.4590657242469
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1745222803845.class_name#}}：

          {{#17452246727900.result#}}'
        desc: ''
        selected: false
        title: 人员发品统计
        type: answer
        variables: []
      height: 122
      id: '17452263343660'
      position:
        x: 895.362377424356
        y: 344.4590657242469
      positionAbsolute:
        x: 895.362377424356
        y: 344.4590657242469
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\n\ndef generate_markdown(records):\n    \"\"\"\n    records:\
          \ list of dicts with keys:\n      - reference_product\n      - reference_product_platform\n\
          \      - ali_product_id\n    \"\"\"\n    lines = []\n    ind = 1\n    for\
          \ rec in records:\n        # skip anything that isn't a dict\n        if\
          \ not isinstance(rec, dict):\n            continue\n\n        new_products_count\
          \ = rec.get('new_products_count', '')\n        reference_product_platform\
          \ = rec.get('reference_product_platform', '')\n\n        \n\n        lines.append(f\"\
          - {ind}、{reference_product_platform} --> [{new_products_count}]\")\n   \
          \     ind = ind+1\n    return \"\\n\".join(lines)\n\ndef main(records_input):\n\
          \    records_list = records_input[0]['result']\n    records = generate_markdown(records_list)\n\
          \    return {\n        \"result\":records\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 来源平台新品量统计
        type: code
        variables:
        - value_selector:
          - '1745208791618'
          - json
          variable: records_input
      height: 53
      id: '17452284721920'
      position:
        x: 502.4097785074441
        y: 492.3026177919959
      positionAbsolute:
        x: 502.4097785074441
        y: 492.3026177919959
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1745222803845.class_name#}}：

          {{#17452284721920.result#}}'
        desc: ''
        selected: false
        title: 来源平台新品统计
        type: answer
        variables: []
      height: 122
      id: '1745228641064'
      position:
        x: 895.362377424356
        y: 492.3026177919959
      positionAbsolute:
        x: 895.362377424356
        y: 492.3026177919959
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\n\ndef generate_markdown(records):\n    \"\"\"\n    records:\
          \ list of dicts with keys:\n      - reference_product\n      - reference_product_platform\n\
          \      - ali_product_id\n    \"\"\"\n    lines = []\n    ind = 1\n    for\
          \ rec in records:\n        # skip anything that isn't a dict\n        if\
          \ not isinstance(rec, dict):\n            continue\n\n        new_products_count\
          \ = rec.get('new_products_count', '')\n        published_shop = rec.get('published_shop',\
          \ '')\n\n        \n\n        lines.append(f\"- {ind}、{published_shop} -->\
          \ [{new_products_count}]\")\n        ind = ind+1\n    return \"\\n\".join(lines)\n\
          \ndef main(records_input):\n    records_list = records_input[0]['result']\n\
          \    records = generate_markdown(records_list)\n    return {\n        \"\
          result\":records\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 店铺新品量统计
        type: code
        variables:
        - value_selector:
          - '1745208791618'
          - json
          variable: records_input
      height: 53
      id: '17452304144140'
      position:
        x: 502.4097785074441
        y: 637.2282050163024
      positionAbsolute:
        x: 502.4097785074441
        y: 637.2282050163024
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\n\ndef generate_markdown(records):\n    \"\"\"\n    records:\
          \ list of dicts with keys:\n      - reference_product\n      - reference_product_platform\n\
          \      - ali_product_id\n    \"\"\"\n    lines = []\n    ind = 1\n    for\
          \ rec in records:\n        # skip anything that isn't a dict\n        if\
          \ not isinstance(rec, dict):\n            continue\n\n        employee =\
          \ rec.get('employee', '')\n        reference_product_platform = rec.get('reference_product_platform',\
          \ '')\n        new_products_count = rec.get('new_products_count', '')\n\
          \        published_shop = rec.get('published_shop', '')\n\n        lines.append(f\"\
          - {ind}、{employee} -- {reference_product_platform} -- {published_shop} -->\
          \ [{new_products_count}]\")\n        ind = ind+1\n    return \"\\n\".join(lines)\n\
          \ndef main(records_input):\n    records_list = records_input[0]['result']\n\
          \    records = generate_markdown(records_list)\n    return {\n        \"\
          result\":records\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 人_来源平台_发品店铺新品量统计
        type: code
        variables:
        - value_selector:
          - '1745208791618'
          - json
          variable: records_input
      height: 53
      id: '17453367248610'
      position:
        x: 502.4097785074441
        y: 779.5549207628845
      positionAbsolute:
        x: 502.4097785074441
        y: 779.5549207628845
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1745222803845.class_name#}}:

          {{#17453367248610.result#}}'
        desc: ''
        selected: false
        title: 人_来源_发布统计
        type: answer
        variables: []
      height: 122
      id: '1745336787332'
      position:
        x: 895.362377424356
        y: 779.5549207628845
      positionAbsolute:
        x: 895.362377424356
        y: 779.5549207628845
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        code: "import json\n\ndef generate_markdown(records):\n    \"\"\"\n    records:\
          \ list of dicts with keys:\n      - reference_product\n      - reference_product_platform\n\
          \      - ali_product_id\n    \"\"\"\n    lines = []\n    ind = 1\n    for\
          \ rec in records:\n        # skip anything that isn't a dict\n        if\
          \ not isinstance(rec, dict):\n            continue\n\n        ref = rec.get('reference_product',\
          \ '')\n        platform = rec.get('reference_product_platform', '').lower()\n\
          \        new_id = rec.get('product_id', '')\n        employee = rec.get('employee',\
          \ '')\n        shop = rec.get('published_shop', '')\n        create_at =\
          \ rec.get('create_at', '')\n\n        # Construct reference product URL\n\
          \        label_ref = f\"[{platform}参考品]({ref})\"\n        \n        # Build\
          \ markdown labels\n        label_new = f\"【alibaba】平台的店铺【{shop}】中的新品【{new_id}】\"\
          \n\n        lines.append(f\"- {ind}、【{employee}】在【{create_at}】从【{label_ref}】发布到\
          \ 【{label_new}】\")\n        ind = ind+1\n    return \"\\n\".join(lines)\n\
          \ndef main(records_input):\n    records_list = records_input[0]['result']\n\
          \    records = generate_markdown(records_list)\n    return {\n        \"\
          result\":records\n    }\n"
        code_language: python3
        desc: ''
        outputs:
          result:
            children: null
            type: string
        selected: false
        title: 从发布商品查来源
        type: code
        variables:
        - value_selector:
          - '1745208791618'
          - json
          variable: records_input
      height: 53
      id: '17453376002030'
      position:
        x: 502.4097785074441
        y: 923.1823017328534
      positionAbsolute:
        x: 502.4097785074441
        y: 923.1823017328534
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    - data:
        answer: '{{#1745222803845.class_name#}}：

          {{#17453376002030.result#}}'
        desc: ''
        selected: false
        title: 发布商品id查来源
        type: answer
        variables: []
      height: 122
      id: '1745337643523'
      position:
        x: 895.362377424356
        y: 923.1823017328534
      positionAbsolute:
        x: 895.362377424356
        y: 923.1823017328534
      selected: false
      sourcePosition: right
      targetPosition: left
      type: custom
      width: 244
    viewport:
      x: 225.36070650902911
      y: -0.8933841619031568
      zoom: 0.8203697452599205
